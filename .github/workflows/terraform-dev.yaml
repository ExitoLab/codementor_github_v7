name: Terraform ci dev

on:
  push:
    paths:
      - 'app/**'
    branches:
      - develop

jobs:

  #Push image to ecr
  push-app-ecr:
    name: Deploy to ECR
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      sha_short: $(git rev-parse --short HEAD)
      TARGET_ENVIRONMENT: dev
      REGISTRIES: 289940214902
      ECR_REGISTRY: 289940214902.dkr.ecr.us-east-1.amazonaws.com

    permissions:
      id-token: write
      contents: read
      pull-requests: write
      repository-projects: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: develop

      - name: Set ENV variables to get the repo name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV

      - name: Use the custom ENV variable
        run: echo $REPO_NAME
        env:
          REPO_NAME: $REPO_NAME

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GithubActionsSession

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Check if ECR repository exists
        id: check_ecr_repo
        run: |
          aws ecr describe-repositories --repository-names ${{ env.REPO_NAME }} --region ${{ env.AWS_REGION }} > /dev/null || echo "::set-output name=exists::false"

      - name: Create ECR repository if it doesn't exist
        if: steps.check_ecr_repo.outputs.exists == 'false'
        run: |
          aws ecr create-repository --repository-name ${{ env.REPO_NAME }} --region ${{ env.AWS_REGION }}

      # #Copy
      - name: Show ECR repository details
        run: |
          aws ecr describe-repositories --repository-names ${{ env.REPO_NAME }} --region ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: "${{ env.REGISTRIES }}"
      - name: Set short sha
        id: sha_short
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        id: build-push-to-ecr
        with:
          context: .
          file: app/Dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.REPO_NAME }}:${{ steps.sha_short.outputs.sha_short }}
          platforms: linux/amd64,linux/arm64
          provenance: false
        continue-on-error: false

      - name: Write metadata details into a json file
        run: | 
          metadata='${{ steps.build-push-to-ecr.outputs.metadata }}'
          imageName=$(echo "$metadata" | grep -o '"image.name": *"[^"]*"' | cut -d '"' -f 4)
          echo "image_tag=$imageName" >> metadata.json

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: metadata
          path: metadata.json
          retention-days: 1

  #Update the tag with the new image
  update_tfvars:
    name: Update the image tag with new image
    runs-on: ubuntu-latest
    needs: push-app-ecr

    #copy
    outputs:
      GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }}

    env:
      GIT_EMAIL: "igeadetokunbo@gmail.com"
      TARGET_ENVIRONMENT: dev
      BRANCH: develop

    steps:
      - uses: actions/checkout@v4
        with:
          ref: develop

      - name: Download metadata to get the docker image details
        uses: actions/download-artifact@v4
        with:
          name: metadata

      - name: Extract image tag
        id: extra_image_tag_ecr
        run: |
          cat metadata.json
          imageTag=$(grep 'image_tag=' metadata.json | cut -d '=' -f 2)
          echo "The extracted image tag is: $imageTag"
          echo "IMAGE_TAG=$imageTag" >> $GITHUB_ENV
  
      - name: Display extracted image tag
        run: |
          echo $IMAGE_TAG

      - name: Get timestamp
        run: echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Set TIMESTAMP as environment variable
        run: echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

      - name: Display TIMESTAMP
        run: |
          echo $TIMESTAMP

      #Copy
      - name: Get Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v3
        with:
          application_id: ${{ secrets.APPLICATION_ID }}
          application_private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}

      - name: Set up Git
        run: |
          git config --global user.email " ${{ env.GIT_EMAIL }} "
          git config --global user.name "GitHub Actions"
          git remote set-url origin "https://x-access-token:${{ secrets.TOKEN }}@github.com/${{ github.repository }}"

      - name: Create new branch
        run: |
          git checkout -b feature/update-image-identifier-${{ env.TARGET_ENVIRONMENT }}-$TIMESTAMP
          git branch
        working-directory: terraform

      - name: Replace image identifier in vars/${{ env.TARGET_ENVIRONMENT }}.tfvars
        working-directory: terraform
        run: |
          echo $IMAGE_TAG
          sed -ie "s#^\(image_identifier\s*=\s*\).*#\1\"$IMAGE_TAG\"#" vars/${{ env.TARGET_ENVIRONMENT }}.tfvars
          cat vars/${{ env.TARGET_ENVIRONMENT }}.tfvars

      - name: Commit changes
        working-directory: terraform
        run: |
          git branch
          git add vars/${{ env.TARGET_ENVIRONMENT }}.tfvars
          git commit -m "Update image identifier"
          git push --set-upstream origin feature/update-image-identifier-${{ env.TARGET_ENVIRONMENT }}-${{ env.TIMESTAMP }}

      #Copy
      - name: Authenticate with GitHub CLI
        run: gh auth login --with-token <<< "${{ steps.get_workflow_token.outputs.token }}"
     
     #Copy
      - name: Create Pull Request
        run: |
          PR_NUMBER=$(gh pr create --title "Update image identifier " --body "Update image identifier" --base "${{ env.BRANCH }}" --head "feature/update-image-identifier-dev-${{ env.TIMESTAMP }}")
          echo "PR Number: $PR_NUMBER"
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }}

      # Add this to get token from github oauth app
      - name: Display PR
        run: |
          echo $PR_NUMBER

      # Add this to get token from github oauth app
      - name: Set the newly created PR to auto merge
        run:  gh pr merge --auto --merge $PR_NUMBER --delete-branch
        env: 
          GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }}

  deploy-terraform-dev:
    needs: update_tfvars
    runs-on: ubuntu-latest

    #copy
    env:
      GITHUB_TOKEN: ${{ needs.update_tfvars.outputs.GITHUB_TOKEN }}

    permissions:
      id-token: write
      contents: read
      pull-requests: write
      repository-projects: write

    strategy:
      max-parallel: 1 # Set the maximum number of parallel jobs to 3
      matrix:
        target_environment:
          - {BUCKET_NAME: "helpme-infra", environment: "dev", region: "us-east-1"}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: develop

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GithubActionsSession

      - name: Set ENV variables to get the repo name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV

      - name: Use the custom ENV variable
        run: echo $REPO_NAME
        env:
          REPO_NAME: $REPO_NAME

      - name: Display GITHUB_TOKEN
        run: | 
          echo ${{ env.GITHUB_TOKEN }}
          echo "Hello"

      - name: Terraform fmt
        working-directory: terraform
        run: terraform fmt -check
        continue-on-error: true

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init -backend-config="bucket=${{ matrix.target_environment.BUCKET_NAME }}" -backend-config="key=${{ env.REPO_NAME }}/app_runner/${{ matrix.target_environment.environment }}.tfstate" -backend-config="region=us-east-1" -backend-config="dynamodb_table=terraform-state-lock-file"

      - name: Select Terraform workspace
        working-directory: terraform
        run: terraform workspace select ${{ matrix.target_environment.environment }} || terraform workspace new ${{ matrix.target_environment.environment }}

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -var="access_token=${{ env.GITHUB_TOKEN }}" -var-file="vars/${{ matrix.target_environment.environment }}.tfvars"

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve -var="access_token=${{ env.GITHUB_TOKEN }}" -var-file="vars/${{ matrix.target_environment.environment }}.tfvars"
        continue-on-error: true